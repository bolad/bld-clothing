{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAzY3p9bkFJMvS9mcbpqWpcsKsA4g1rojA\",\n  authDomain: \"bld-clothing.firebaseapp.com\",\n  databaseURL: \"https://bld-clothing.firebaseio.com\",\n  projectId: \"bld-clothing\",\n  storageBucket: \"bld-clothing.appspot.com\",\n  messagingSenderId: \"76192001705\",\n  appId: \"1:76192001705:web:9cdb1ad71fd706280903b8\",\n  measurementId: \"G-WQR7SMQQBJ\"\n}; //take the userAuth object received from authentication library and store in database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //Get the user reference from firestore\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //wait to GET the data from userRef and store it in snapShot\n\n  const snapShot = await userRef.get(); //Save snapShot to database if it does not exist\n\n  if (!snapShot.exists) {\n    //Destructure which data from userAuth you want to save to database\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); //Make asynchronous to the database to store the data\n\n    try {\n      //Create user with .set()\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } //return the user reference so we can call it in App.js\n\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //get a new reference document from fireebase \n    const newDocRef = collectionRef.doc(); //console.log(newDocRef)\n\n    batch.set(newDocRef, obj);\n  }); //fireoff th batch request\n\n  return await batch.commit();\n}; //convert collections snapshot from and array to an object to store in redux\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.doc.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollections);\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/bolad/Desktop/react-projects/bld-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","map","title","items","data","routeName","encodeURI","toLowerCase","id","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAzY3p9bkFJMvS9mcbpqWpcsKsA4g1rojA\",\n    authDomain: \"bld-clothing.firebaseapp.com\",\n    databaseURL: \"https://bld-clothing.firebaseio.com\",\n    projectId: \"bld-clothing\",\n    storageBucket: \"bld-clothing.appspot.com\",\n    messagingSenderId: \"76192001705\",\n    appId: \"1:76192001705:web:9cdb1ad71fd706280903b8\",\n    measurementId: \"G-WQR7SMQQBJ\"\n  };\n\n  //take the userAuth object received from authentication library and store in database\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n    if(!userAuth) return;\n\n    //Get the user reference from firestore\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    //wait to GET the data from userRef and store it in snapShot\n    const snapShot = await userRef.get();\n\n    //Save snapShot to database if it does not exist\n    if(!snapShot.exists) {\n        //Destructure which data from userAuth you want to save to database\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        //Make asynchronous to the database to store the data\n        try {\n            //Create user with .set()\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n            \n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n    //return the user reference so we can call it in App.js\n    return userRef;\n  }\n\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    console.log(collectionRef)\n\n    const batch = firestore.batch();\n    \n    objectsToAdd.forEach(obj => {\n        //get a new reference document from fireebase \n        const newDocRef = collectionRef.doc();\n        //console.log(newDocRef)\n        batch.set(newDocRef, obj);\n    });\n     //fireoff th batch request\n    return await batch.commit();\n  }\n\n  //convert collections snapshot from and array to an object to store in redux\n  export const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollections = collections.doc.map(doc => {\n        const {title, items } = doc.data();\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        };\n    });\n    console.log(transformedCollections);\n  }\n\n  // Initialize Firebase\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({prompt: 'select_account'});\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}