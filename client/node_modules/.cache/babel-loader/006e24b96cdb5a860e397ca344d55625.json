{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAzY3p9bkFJMvS9mcbpqWpcsKsA4g1rojA\",\n  authDomain: \"bld-clothing.firebaseapp.com\",\n  databaseURL: \"https://bld-clothing.firebaseio.com\",\n  projectId: \"bld-clothing\",\n  storageBucket: \"bld-clothing.appspot.com\",\n  messagingSenderId: \"76192001705\",\n  appId: \"1:76192001705:web:9cdb1ad71fd706280903b8\",\n  measurementId: \"G-WQR7SMQQBJ\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(config); //take the userAuth object received from authentication library and store in database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //Get the user reference from firestore\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //wait to GET the data from userRef and store it in snapShot\n\n  const snapShot = await userRef.get(); //Save snapShot to database if it does not exist\n\n  if (!snapShot.exists) {\n    //Destructure which data from userAuth you want to save to database\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); //Make asynchronous to the database to store the data\n\n    try {\n      //Create user with .set()\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } //return the user reference so we can call it in App.js\n\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //group all calls together into one big request\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // get a new reference document from firebase collectionRef and generate a random ID\n    // for it\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  }); //fireoff the batch request to create collections in firestore\n\n  return await batch.commit();\n}; //convert collections snapshot from and array to an object to store in redux\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //console.log(transformedCollections);\n  //pass in an initial empty object\n\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator; //so it goes into the next reduce iteration\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/bolad/Desktop/react-projects/bld-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAzY3p9bkFJMvS9mcbpqWpcsKsA4g1rojA\",\n    authDomain: \"bld-clothing.firebaseapp.com\",\n    databaseURL: \"https://bld-clothing.firebaseio.com\",\n    projectId: \"bld-clothing\",\n    storageBucket: \"bld-clothing.appspot.com\",\n    messagingSenderId: \"76192001705\",\n    appId: \"1:76192001705:web:9cdb1ad71fd706280903b8\",\n    measurementId: \"G-WQR7SMQQBJ\"\n  };\n\n// Initialize Firebase\nfirebase.initializeApp(config);\n\n//take the userAuth object received from authentication library and store in database\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\nif(!userAuth) return;\n\n//Get the user reference from firestore\nconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\n//wait to GET the data from userRef and store it in snapShot\nconst snapShot = await userRef.get();\n\n//Save snapShot to database if it does not exist\nif(!snapShot.exists) {\n    //Destructure which data from userAuth you want to save to database\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    //Make asynchronous to the database to store the data\n    try {\n        //Create user with .set()\n        await userRef.set({\n            displayName,\n            email,\n            createdAt,\n            ...additionalData\n        })\n        \n    } catch (error) {\n        console.log('error creating user', error.message);\n    }\n}\n//return the user reference so we can call it in App.js\nreturn userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n\n    //group all calls together into one big request\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach(obj => {\n    // get a new reference document from firebase collectionRef and generate a random ID\n    // for it\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef)\n    batch.set(newDocRef, obj);\n});\n    //fireoff the batch request to create collections in firestore\nreturn await batch.commit();\n};\n\n//convert collections snapshot from and array to an object to store in redux\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollections = collections.docs.map(doc => {\n        const {title, items } = doc.data();\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        };\n    });\n    //console.log(transformedCollections);\n\n    //pass in an initial empty object\n    return transformedCollections.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator; //so it goes into the next reduce iteration\n    }, {});\n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}