{"ast":null,"code":"//listen for every action of a specific type passed to it\nimport { takeEvery, call } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get();\n  const convertToMap = yield call(convertCollectionsSnapshotToMap, snapshot); //this.unsuscribeFromSnapShot = collectionRef.onSnapshot( async snapshot => {**Observable call**\n\n  collectionRef.get().then(snapshot => {\n    //**Promise based async call**\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/bolad/Desktop/react-projects/bld-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","convertToMap","then","collectionsMap","dispatch","catch","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AAEzC,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AAEA,QAAMC,YAAY,GAAG,MAAMX,IAAI,CAACG,+BAAD,EAAkCM,QAAlC,CAA/B,CANyC,CAQrC;;AACAF,EAAAA,aAAa,CAACG,GAAd,GAAoBE,IAApB,CAAyBH,QAAQ,IAAI;AAAE;AACnC,UAAMI,cAAc,GAAGV,+BAA+B,CAACM,QAAD,CAAtD;AACAK,IAAAA,QAAQ,CAACV,uBAAuB,CAACS,cAAD,CAAxB,CAAR;AACH,GAHD,EAGGE,KAHH,CAGSC,KAAK,IAAIF,QAAQ,CACtBT,uBAAuB,CAACW,KAAK,CAACC,OAAP,CADD,CAH1B;AAMH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMnB,SAAS,CACXE,eAAe,CAACkB,uBADL,EAEXb,qBAFW,CAAf;AAIH","sourcesContent":["//listen for every action of a specific type passed to it\nimport { takeEvery, call } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'\n\nexport function* fetchCollectionsAsync() {\n\nconst collectionRef = firestore.collection('collections');\n\nconst snapshot = yield collectionRef.get();\n\nconst convertToMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n\n    //this.unsuscribeFromSnapShot = collectionRef.onSnapshot( async snapshot => {**Observable call**\n    collectionRef.get().then(snapshot => { //**Promise based async call**\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(\n        fetchCollectionsFailure(error.message)\n    ));\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync\n    );\n}"]},"metadata":{},"sourceType":"module"}