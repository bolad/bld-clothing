{"ast":null,"code":"//listen for every action of a specific type passed to it\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //     this.unsuscribeFromSnapShot = collectionRef.onSnapshot( async snapshot => {**Observable call**\n  //     collectionRef.get().then(snapshot => { //**Promise based async call**\n  //         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionsSuccess(collectionsMap));\n  //     }).catch(error => dispatch(\n  //         fetchCollectionsFailure(error.message)\n  //     ));\n  // \n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/bolad/Desktop/react-projects/bld-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,MAAI;AACA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAC7BI,+BAD6B,EAE7BM,QAF6B,CAAjC;AAIA,UAAMT,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACH,GARD,CAQE,OAAOC,KAAP,EAAc;AACZ,UAAMZ,GAAG,CAACK,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH,GAXoC,CAarC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,SAAS,CACXG,eAAe,CAACc,uBADL,EAEXT,qBAFW,CAAf;AAIH","sourcesContent":["//listen for every action of a specific type passed to it\nimport { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'\n\nexport function* fetchCollectionsAsync() {\n    try {\n        const collectionRef = firestore.collection('collections');\n        const snapshot = yield collectionRef.get();\n        const collectionsMap = yield call(\n            convertCollectionsSnapshotToMap, \n            snapshot\n        );\n        yield put(fetchCollectionsSuccess(collectionsMap))\n    } catch (error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n\n    //     this.unsuscribeFromSnapShot = collectionRef.onSnapshot( async snapshot => {**Observable call**\n    //     collectionRef.get().then(snapshot => { //**Promise based async call**\n    //         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //         dispatch(fetchCollectionsSuccess(collectionsMap));\n    //     }).catch(error => dispatch(\n    //         fetchCollectionsFailure(error.message)\n    //     ));\n    // \n\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync\n    );\n}"]},"metadata":{},"sourceType":"module"}